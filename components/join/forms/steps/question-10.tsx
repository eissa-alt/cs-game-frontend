import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { Translate, useTranslate } from '~/i18n';
import cookie from 'js-cookie';
import { GuestType } from '~/interfaces/guest';
import CustomRadioInput from '~/components/shared/forms/custom-radio-input';
import { QuestionType } from '~/interfaces/question';
import { useRouter } from 'next/router';
import QuestionsEn from '~/data/qustions_en.json';
import QuestionsAr from '~/data/qustions_ar.json';
import Axios from '~/utils/axios';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';
import { toast } from 'react-hot-toast';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type Question10Props = {
   step?: string | undefined;
   question: QuestionType;
};

const Question10 = ({ step, question }: Question10Props) => {
   const { translate, lang } = useTranslate();
   const allQuestions = lang === 'en' ? QuestionsEn : QuestionsAr;
   const { executeRecaptcha } = useGoogleReCaptcha();
   const [loading, setLoading] = useState(false);

   const {
      register,
      // handleSubmit,

      formState: { errors },
   } = useFormContext<GuestType>();

   const router = useRouter();

   const submitForm = async (value: string) => {
      if (loading) {
         return;
      }
      setLoading(true);
      const recaptcha = await executeRecaptcha?.();
      try {
         const userData = cookie.get('user_data') && JSON.parse(cookie.get('user_data') as any);

         const updatedUserObj = {
            ...userData,
            question_10: value,
            // step: nextStep,
         };

         // console.log(updatedUserObj, 'updatedUserObj');

         const answers = Object.entries(updatedUserObj)
            .filter(item => item[0] !== 'step')
            .map(item => {
               return {
                  question_key: item[0],
                  answer: item[1],
               };
            });

         let result = 0;
         answers.map(x => {
            allQuestions.map(item => {
               if (item.answer === x.answer) {
                  result++;
               }
            });
         });
         const data = {
            id: router.query.id,
            result: result,
            recaptcha,
         };
         // console.log(data, 'data');
         // cookie.remove('user_data');
         // cookie.remove('questions');
         const response = await Axios.post(`result?lang=${lang}`, data);

         cookie.set('result', result.toString());
         router.replace(`/${lang}/join/success/${response.data.data}`);
      } catch (error: any) {
         console.log(error, 'error');
         if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 3000,
            });
         } else {
            toast.error('something went wrong!');
         }
         setLoading(false);
      }
   };

   return (
      <React.Fragment>
         {step === 'question_10' ? (
            <div>
               <div className="p-1 sm:p-1">
                  <div className="pt-1">
                     <form noValidate className="relative" autoComplete="off">
                        {/* question_10 */}
                        {loading ? (
                           <div className="py-10  text-center text-xl font-bold text-white">
                              <Translate id="web:loading" />
                              ...
                           </div>
                        ) : (
                           <CustomRadioInput
                              label={translate({ id: 'web:question_10' })}
                              subLabel={question.sub_label}
                              // isRequired
                              isInline={false}
                              callBack={val => submitForm(val)}
                              // return  { value: 'male', label: translate({ id: 'web:male' }) },
                              options={question.options.map(item => {
                                 return { label: item, value: item };
                              })}
                              id="question_10"
                              error={errors.question_10?.message}
                              {...register('question_10', {
                                 required: translate({ id: 'validation:required' }),
                              })}
                           />
                        )}
                     </form>
                  </div>
               </div>
            </div>
         ) : (
            ''
         )}
      </React.Fragment>
   );
};

export default Question10;
