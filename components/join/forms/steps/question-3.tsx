// import classNames from 'classnames';
import React from 'react';
import { useFormContext } from 'react-hook-form';
// import SubmitBtn from '~/components/shared/buttons/submit-btn';
// import CustomInput from '~/components/shared/forms/custom-input';
import { useTranslate } from '~/i18n';
import cookie from 'js-cookie';
import { GuestType } from '~/interfaces/guest';

import CustomRadioInput from '~/components/shared/forms/custom-radio-input';
import { QuestionType } from '~/interfaces/question';

// import TitleSelectNew from '~/components/shared/select/titles-select-new';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type Question3Props = {
   onNextClick: () => any;
   step?: string | undefined;
   showStepSummary?: boolean;
   nextStep?: string;
   question: QuestionType;
};

const Question3 = ({ onNextClick, step, nextStep, question }: Question3Props) => {
   const { translate } = useTranslate();
   const {
      register,
      // handleSubmit,

      formState: { errors },
   } = useFormContext<GuestType>();

   const submitForm = async (value: string) => {
      try {
         const userData = cookie.get('user_data') && JSON.parse(cookie.get('user_data') as any);
         const updatedUserObj = {
            ...userData,
            question_3: value,
            step: nextStep,
         };

         cookie.set('user_data', JSON.stringify(updatedUserObj));
         onNextClick();
      } catch (error: any) {
         console.log(error, 'error');
      }
   };

   return (
      <React.Fragment>
         {step === 'question_3' ? (
            <div>
               <div className="p-1 sm:p-1">
                  <div className="pt-1">
                     <form noValidate className="relative" autoComplete="off">
                        {/* question_3 */}
                        <CustomRadioInput
                           label={translate({ id: 'web:question_3' })}
                           subLabel={question.sub_label}
                           // isRequired
                           isInline={false}
                           callBack={val => submitForm(val)}
                           // return  { value: 'male', label: translate({ id: 'web:male' }) },
                           options={question.options.map(item => {
                              return { label: item, value: item };
                           })}
                           id="question_3"
                           error={errors.question_3?.message}
                           {...register('question_3', {
                              required: translate({ id: 'validation:required' }),
                           })}
                        />
                     </form>
                  </div>
               </div>
            </div>
         ) : (
            ''
         )}
      </React.Fragment>
   );
};

export default Question3;
