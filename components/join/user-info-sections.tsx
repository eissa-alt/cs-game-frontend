import { Translate, useTranslate } from '~/i18n';
import React, { useState } from 'react';
import { Controller, useForm } from 'react-hook-form';
import CustomInput from '../shared/forms/custom-input';
import SubmitBtn from '../shared/buttons/submit-btn';
import toast from 'react-hot-toast';
import { useRouter } from 'next/router';
import classNames from 'classnames';
import CustomSelect from '../shared/forms/custom-select/custom-select';
import RegionsTypeSelect from '~/data/status-types-select';
import Cookies from 'js-cookie';
import Axios from '~/utils/axios';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type FormData =
   | {
        full_name: string;
        staff_number: string;
        region: string;
     }
   | { [key: string]: string };

const UserInfoSections = () => {
   Cookies.remove('user_data');
   Cookies.remove('questions');

   const router = useRouter();
   const { executeRecaptcha } = useGoogleReCaptcha();

   const { lang, translate } = useTranslate();
   const [loading, setLoading] = useState(false);

   const {
      register,
      handleSubmit,
      control,
      setValue,
      setError,
      getValues,
      formState: { errors },
   } = useForm<FormData>();

   const submitForm = async (values: FormData) => {
      // console.log(values);
      if (loading) {
         return;
      }
      setLoading(true);
      const recaptcha = await executeRecaptcha?.();
      const data = {
         ...values,
         recaptcha,
      };
      try {
         const response = await Axios.post(`new-user?lang=${lang}`, data);

         // toast.success(translate({ id: 'res:info_saved' }));

         router.replace(`/${lang}/join/challenge/${response.data.data}`);
      } catch (error: any) {
         console.log(error, 'error');
         if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 3000,
            });
         } else if (error?.response?.status === 422) {
            const responseErrors = error?.response?.data?.data;
            Object.keys(responseErrors).map(key => {
               setError(key as 'staff_number' | 'region' | 'full_name', {
                  message: responseErrors[key][0],
               });
               // toast.error(responseErrors[key][0], {
               //    duration: 3000,
               // });
            });
            // toast.error(error?.response?.data?.status, {
            //    duration: 3000,
            // });
         } else {
            toast.error(translate({ id: 'res:500' }), {
               duration: 3000,
            });
         }
         setLoading(false);
      }
   };

   return (
      <React.Fragment>
         <div className="container">
            <div className="row">
               <div className="lg:col-4 lg:offset-4">
                  <form
                     noValidate
                     onSubmit={handleSubmit(submitForm)}
                     className=""
                     autoComplete="off">
                     <div className="row">
                        <div className="lg:px-11">
                           <div className="row">
                              <div className="col-12">
                                 {/* full_name */}
                                 <CustomInput
                                    label={translate({ id: 'web:full_name' })}
                                    type="text"
                                    id="full_name"
                                    error={errors.full_name?.message}
                                    isInline={false}
                                    isRequired={true}
                                    {...register('full_name', {
                                       required: translate({ id: 'validation:required' }),
                                    })}
                                 />
                                 {/* staff_number */}
                                 <CustomInput
                                    label={translate({ id: 'web:job_number' })}
                                    type="text"
                                    id="staff_number"
                                    error={errors.staff_number?.message}
                                    isInline={false}
                                    isRequired={true}
                                    {...register('staff_number', {
                                       required: translate({ id: 'validation:required' }),
                                       validate: {
                                          trim: (value: any) =>
                                             value == value.trim() ||
                                             translate({
                                                id: 'validation:delete_spaces',
                                             }),
                                          // isId: val => validateSAID(val, 'citizen') || 'تأكد من رقم الهوية',
                                          // isUnique: async val => await isUniqueAttribute('document_number', val),

                                          minLength: (value: any) => {
                                             if (value.length !== 8) {
                                                return translate({
                                                   id: 'validation:id_8_digit',
                                                });
                                             }
                                             return true;
                                          },
                                       },
                                    })}
                                 />
                                 {/* phone */}
                                 {/* <CustomInput
                                    label={translate({ id: 'web:phone' })}
                                    type="text"
                                    id="phone"
                                    error={errors.phone?.message}
                                    isInline={false}
                                    isRequired={true}
                                    {...register('phone', {
                                       required: translate({ id: 'validation:required' }),
                                    })}
                                 /> */}
                                 {/* region */}
                                 <div className="row">
                                    <div className="col-12">
                                       <label
                                          htmlFor="region"
                                          className={classNames(
                                             ' block  text-center  font-bold text-white  ',
                                             'required-label'
                                          )}>
                                          <Translate id="web:region" />
                                       </label>
                                    </div>
                                    <div className="col-12">
                                       <Controller
                                          name="region"
                                          control={control}
                                          render={() => (
                                             <CustomSelect
                                                value={RegionsTypeSelect.find(
                                                   item => item.value === getValues()['region']
                                                )}
                                                placeholder={translate({ id: 'web:select_region' })}
                                                onChange={(value: any) => {
                                                   setValue('region', String(value?.value), {
                                                      shouldValidate: true,
                                                   });
                                                }}
                                                id="region"
                                                options={RegionsTypeSelect}
                                                error={errors.region?.message}
                                             />
                                          )}
                                          rules={{
                                             required: translate({ id: 'validation:required' }),
                                          }}
                                       />
                                    </div>
                                 </div>
                              </div>
                           </div>
                           <div className="col-12 mt-2">
                              <SubmitBtn
                                 noIcon
                                 id="submit-btn"
                                 loading={loading}
                                 text={translate({ id: 'web:start' })}
                              />
                           </div>
                           <div>
                              <p className="mt-4 text-center text-sm text-white">
                                 <Translate id="web:to_complete_the_challenge" />
                              </p>
                           </div>
                        </div>
                     </div>
                  </form>
               </div>
            </div>
         </div>
      </React.Fragment>
   );
};

export default UserInfoSections;
