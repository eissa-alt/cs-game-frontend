// import { Translate } from '~/i18n';
// import { useAuth } from '~/auth';
import classNames from 'classnames';
import { forwardRef } from 'react';
import Label from './label';
import SubLabel from './sub-label';
// import { GuestType } from '~/interfaces/guest';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type Item = {
   label: string;
   value: string;
};
export type InputProps = {
   label?: React.ReactNode;
   // type?: 'raido';
   error?: React.ReactNode;
   name?: string;
   id?: string;
   innerRef?: any;
   disabled?: boolean;
   placeHolder?: string;
   autoComplete?: string;
   className?: string;
   groupClassName?: string;
   options: Item[] | undefined;
   isInline?: boolean;
   isRequired?: boolean;
   subLabel?: React.ReactNode;
   callBack: (e: string) => void;
   // callBack: (e?: React.BaseSyntheticEvent<object, any, any> | undefined) => Promise<void>;
   help?: React.ReactNode;

   // value?: string | number | readonly string[] | undefined;
} & React.HTMLAttributes<HTMLInputElement | HTMLTextAreaElement>;
const CustomRadioInput = forwardRef<any, InputProps>(
   (
      {
         label,
         subLabel,
         error,
         // labelClassName,
         groupClassName,
         disabled = false,
         id = '',
         // innerRef,
         isInline = false,
         isRequired = false,
         // value = '',
         help,
         options,
         callBack,
         ...props
      },
      ref
   ) => {
      // const { authenticated } = useAuth();

      return (
         <div className={groupClassName || classNames(isInline ? 'row' : 'relative mb-5  w-full')}>
            {label && (
               <div className={classNames(isInline ? 'self-center md:mb-5 md:col-3' : '')}>
                  <Label id={id} label={label} isRequired={isRequired} />
               </div>
            )}
            {subLabel && (
               <div
                  className={classNames(
                     'capitalize',
                     isInline
                        ? 'self-center text-center md:mb-5 md:col-3'
                        : 'self-center text-center'
                  )}>
                  <SubLabel id={id} label={subLabel} isRequired={isRequired} />
               </div>
            )}
            <div className={classNames(isInline ? 'mb-5 md:col-9' : '')}>
               <div className="col-12 mt-5">
                  <div className={classNames(' ')}>
                     {options?.map((item, key) => (
                        <div className="flex  justify-center pb-4" key={key}>
                           <label
                              onClick={() => callBack(item.value)}
                              className={classNames(
                                 'flex cursor-pointer items-center rounded-full border border-primary bg-white px-4 py-1 font-bold text-primary hover:border-white hover:bg-primary-500 hover:text-white'
                              )}>
                              <input
                                 id={id}
                                 ref={ref}
                                 type="radio"
                                 // disabled={!!user && role !== 'co-team-manager'}
                                 className="checked:bg-white-dot form-radio hidden  border-primary bg-transparent text-black focus:outline-none focus:ring  focus:ring-primary focus:ring-opacity-50 focus:ring-offset-0 focus:ring-offset-transparent"
                                 value={item.value}
                                 // defaultChecked={getValues('gender') === 'male'}
                                 disabled={disabled}
                                 {...props}
                              />
                              <div className="flex-1 text-center  ">{item.label}</div>
                           </label>
                        </div>
                     ))}
                  </div>
                  {help && <div>{help}</div>}
                  {error && typeof error !== 'boolean' && (
                     <div className="absolute text-xs text-red-500" role="alert">
                        {error}
                     </div>
                  )}
               </div>
            </div>
         </div>
      );
   }
);
CustomRadioInput.displayName = `CustomRadioInput`;
export default CustomRadioInput;
