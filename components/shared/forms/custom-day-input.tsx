// import { Translate } from '~/i18n';
// import { useAuth } from '~/auth';
// import { Dialog } from '@headlessui/react';
import classNames from 'classnames';
import { format, fromUnixTime } from 'date-fns';
import { arSA, enUS } from 'date-fns/locale';
// import { format, fromUnixTime } from 'date-fns';
import React, { forwardRef, useState } from 'react';
import { DayPicker } from 'react-day-picker';
// import 'react-day-picker/dist/style.css';
import { Translate, useTranslate } from '~/i18n';
// import getMonthList from '~/utils/getMonthsList';
import Modal from '../modals';
import Label from './label';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/
export type InputProps = {
   label?: React.ReactNode;
   type?: 'text';
   error?: React.ReactNode;
   name?: string;
   id?: string;
   innerRef?: any;
   disabled?: boolean;
   placeHolder?: string;
   autoComplete?: string;
   className?: string;
   groupClassName?: string;
   append?: React.ReactElement | React.ReactNode;
   prepend?: React.ReactElement | React.ReactNode;
   appendPaddingClass?: string;
   prependPaddingClass?: string;
   isInline?: boolean;
   isRequired?: boolean;
   help?: React.ReactNode;
   // defaultSelected?: string;
   value: string | null | undefined;
   // defaultValue?: string;
   callBack: (value: any) => void;
   fromYear: number;
   toYear: number;
   fromMonth?: Date;
   toMonth?: Date;
   disabledDays?: any;
   // value?: string | number | readonly string[] | undefined;
} & React.HTMLAttributes<HTMLInputElement | HTMLTextAreaElement>;

// function CustomCaption(props: CaptionProps) {
//    const { goToMonth, currentMonth } = useNavigation();
//    return (
//       <h2>
//          {format(props.displayMonth, 'MMM yyy')}
//          <button
//             disabled={!previousMonth}
//             onClick={() => previousMonth && goToMonth(previousMonth)}>
//             Previous
//          </button>
//          <button disabled={!nextMonth} onClick={() => nextMonth && goToMonth(nextMonth)}>
//             Next
//          </button>
//       </h2>
//    );
// }
const CustomDayInput = forwardRef<any, InputProps>(
   (
      {
         label,
         error,
         className,
         // labelClassName,
         groupClassName,
         disabled = false,
         id = '',
         type = 'text',
         append,
         prepend,
         prependPaddingClass,
         appendPaddingClass,
         // innerRef,
         autoComplete,
         placeHolder = '',
         isInline = false,
         isRequired = false,
         // defaultValue,
         // defaultSelected,
         value,
         help,
         fromYear,
         toYear,
         fromMonth,
         toMonth,

         disabledDays,
         callBack,
         ...props
      },
      ref
   ) => {
      // const { authenticated } = useAuth();
      // const [open, setOpen] = useState(false);
      const [isOpen, setIsOpen] = useState(false);
      const { lang } = useTranslate();

      // const { selectedDate, setSelectedDate } = useState('');
      // const { canChangeYear, setCanChangeYear } = useState(false);

      // console.log(defaultSelected, 'defaultSelected');
      // const today = new Date();
      const [selected, setSelected] = useState<Date | undefined>();

      // defaultSelected
      //    ? new Date(new Date().setMilliseconds(parseInt(defaultSelected)))
      //    : undefined

      // console.log(getMonthList(lang), 'months');

      // const YearMonthForm = ({ currentDate, onChange, onSubmit }) => {
      //    const years = [2010, 2011, 2012, 2013, 2014, 2015];
      //    const months = getMonthList(lang);

      //    const currentMonth = currentDate.getMonth();
      //    const currentYear = currentDate.getFullYear();

      //    const handleChange = function (e: any) {
      //       onChange(new Date(e.target.form.year.value, e.target.form.month.value));
      //    };

      //    return (
      //       <form onSubmit={onSubmit}>
      //          <select name="month" onChange={handleChange}>
      //             {months.map((month, i) => (
      //                <option key={i} value={i} selected={currentMonth === month}>
      //                   {month}
      //                </option>
      //             ))}
      //          </select>
      //          <select name="year" onChange={handleChange}>
      //             {years.map((year, i) => (
      //                <option key={i} value={year} selected={currentYear === year}>
      //                   {year}
      //                </option>
      //             ))}
      //          </select>
      //          <button type="submit">OK</button>
      //       </form>
      //    );
      // };

      const confirm = () => {
         if (selected) {
            callBack(selected);
            setIsOpen(false);
         }
      };
      return (
         <React.Fragment>
            <div
               className={groupClassName || classNames(isInline ? 'row' : 'relative mb-5 w-full')}>
               {label && (
                  <div className={classNames(isInline ? 'self-center md:mb-5 md:col-3' : '')}>
                     <Label id={id} label={label} isRequired={isRequired} />
                  </div>
               )}
               <div className={classNames(isInline ? 'mb-5 md:col-9' : '')}>
                  <div className="col-12">
                     <div className={classNames('relative flex')}>
                        {/* prepend */}
                        {prepend && <span className="absolute-v-center">{prepend}</span>}
                        <input
                           autoComplete={autoComplete}
                           id={id}
                           ref={ref}
                           // ref={innerRef}
                           type={type}
                           placeholder={placeHolder}
                           readOnly //! important
                           onClick={() => setIsOpen(true)}
                           // value={selected && format(selected, 'dd/MM/yyyy')}
                           // defaultValue={selected && format(selected, 'dd/MM/yyyy')}
                           className={classNames(
                              className,
                              'cursor-pointer',
                              error &&
                                 typeof error !== 'boolean' &&
                                 '!border-red-500 focus:border-red-500 focus:ring-red-500',
                              'custom-input block w-full border-primary text-primary  placeholder:text-[#7F8694] focus:border-primary focus:outline-none focus:ring focus:ring-primary focus:ring-opacity-50',
                              appendPaddingClass && `${appendPaddingClass}`,
                              prependPaddingClass && `${prependPaddingClass}`,
                              disabled &&
                                 'disabled:cursor-not-allowed disabled:bg-gray-200 disabled:opacity-50',
                              value && 'text-transparent'
                           )}
                           disabled={disabled}
                           {...props}
                        />
                        {value ? (
                           <div
                              onClick={() => setIsOpen(true)}
                              className={classNames(
                                 className,
                                 'absolute cursor-pointer',
                                 error &&
                                    typeof error !== 'boolean' &&
                                    '!border-red-500 focus:border-red-500 focus:ring-red-500',
                                 'custom-input block w-full border-primary  text-black  focus:border-primary focus:outline-none focus:ring focus:ring-primary focus:ring-opacity-50',
                                 appendPaddingClass && `${appendPaddingClass}`,
                                 prependPaddingClass && `${prependPaddingClass}`,
                                 disabled &&
                                    'disabled:cursor-not-allowed disabled:bg-gray-200 disabled:opacity-50'
                              )}>
                              {format(fromUnixTime(parseInt(value)), 'dd/MM/yyyy')}
                           </div>
                        ) : (
                           ''
                        )}
                        {/* append */}
                        {append && (
                           <span
                              onClick={() => setIsOpen(true)}
                              className="absolute-v-center cursor-pointer ltr:right-2 rtl:left-2">
                              {append}
                           </span>
                        )}
                     </div>

                     {help && <div>{help}</div>}
                     {error && typeof error !== 'boolean' && (
                        <div className="absolute text-xs text-red-500" role="alert">
                           {error}
                        </div>
                     )}
                  </div>
               </div>
            </div>
            <Modal size="lg" open={isOpen}>
               <Modal.Body className="">
                  {/* Dialog body */}
                  <div className="flex">
                     <div className="relative mx-auto max-w-sm rounded border border-gray-500 bg-white p-1 sm:px-10 sm:py-10">
                        <DayPicker
                           fromYear={fromYear}
                           toYear={toYear}
                           fromMonth={fromMonth}
                           toMonth={toMonth}
                           showOutsideDays
                           captionLayout="dropdown"
                           mode="single"
                           selected={selected}
                           onSelect={setSelected}
                           locale={lang === 'en' ? enUS : arSA}
                           disabled={disabledDays}
                           // modifiersClassNames={{}}
                        />
                        <div>
                           <div className="row">
                              <div className="col-6">
                                 <button
                                    type="button"
                                    className={classNames(
                                       className,
                                       'block w-full  px-4 py-3 text-center text-sm font-medium leading-5 text-secondary transition-colors duration-150  focus:outline-none focus:ring  focus:ring-opacity-50  ',
                                       'disabled:cursor-not-allowed disabled:opacity-50 ',
                                       'enabled:focus:ring-accent border border-secondary'
                                    )}
                                    onClick={() => setIsOpen(false)}>
                                    <Translate id="web:no_cancel" />
                                 </button>
                              </div>
                              <div className="col-6">
                                 <button
                                    disabled={selected === undefined}
                                    onClick={() => {
                                       confirm();
                                    }}
                                    type="button"
                                    className={classNames(
                                       className,
                                       'block w-full px-4 py-3 text-center text-sm font-medium leading-5 text-white transition-colors duration-150  focus:outline-none focus:ring  focus:ring-opacity-50  ',
                                       'disabled:cursor-not-allowed disabled:opacity-50 ',
                                       'enabled:focus:ring-accent enabled:hover:bg-secondary600 enabled:active:bg-secondary600 bg-secondary',
                                       ''
                                    )}>
                                    <Translate id="web:confirm" />
                                 </button>
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </Modal.Body>
            </Modal>
         </React.Fragment>
      );
   }
);
CustomDayInput.displayName = `CustomDayInput`;
export default CustomDayInput;
