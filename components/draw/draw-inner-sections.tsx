import React, { Fragment, forwardRef, useEffect, useState } from 'react';
import { Translate, useTranslate } from '~/i18n';
// import Image from '../shared/image';
import Confetti from './confetti';
// import WinnerEN from '~/data/winners-en.json';
// import WinnerAR from '~/data/winners-ar.json';
import classNames from 'classnames';
import ButtonBtn from '../shared/buttons/button-btn';
import { useRouter } from 'next/router';
const { useImperativeHandle } = React;

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/
type Person = {
   id: number;
   full_name: string;
   staff_number: string;
   region: string;
};
type DrawSectionsInnerProps = {
   ref: any;
   namesList: Person[];
};
const DrawSectionsInner = forwardRef(({ namesList }: DrawSectionsInnerProps, ref) => {
   // The component instance will be extended
   // with whatever you return from the callback passed
   // as the second argument
   useImperativeHandle(ref, () => ({
      TriggerNext() {
         if (hasWinner) {
            winnerIndex < namesList.length && next();
         } else {
            if (isRendering) {
               getWinner();
            } else {
               setIsRendering(true);
            }
         }
      },
      TriggerBack() {
         if (hasWinner) {
            drawAgain();
         }
      },
   }));
   const [isExploding, setIsExploding] = useState(false);
   const router = useRouter();
   const { translate } = useTranslate();
   const interval = 50;
   const [winnerIndex, setWinnerIndex] = useState<number>(1);

   // const numbersList = [namesList?.length].map(i => i + 1);

   // total guests
   const [names, setNames] = useState<Person[]>(namesList);
   // console.log(names, 'names');

   const [name, setName] = useState<Person>();
   const [isRendering, setIsRendering] = useState(false);
   const [hasWinner, setHasWinner] = useState<Person>();
   // console.log(hasWinner, 'hasWinner');

   const getWinnerName = () => {
      return winnerIndex;
   };

   const getWinner = () => {
      const number = names[Math.floor(Math.random() * names.length)];
      setIsRendering(false);
      setHasWinner(number);
      setIsExploding(true);
   };

   const drawAgain = () => {
      const list = names.filter(x => x.id !== hasWinner?.id);
      setNames(list);
      setHasWinner(undefined);
      setWinnerIndex(per => per + 1);

      setIsRendering(true);
      setIsExploding(false);
   };

   const next = () => {
      const list = names.filter(x => x.id !== hasWinner?.id);
      setNames(list);
      setHasWinner(undefined);
      setWinnerIndex(per => per + 1);
      setIsRendering(true);
      setIsExploding(false);
   };

   useEffect(() => {
      if (isRendering) {
         const i = setInterval(() => {
            setName(names[Math.floor(Math.random() * names.length)]);
         }, interval);
         return () => clearInterval(i);
      }
   }, [isRendering, names]);

   return (
      <section>
         <div className="container relative pt-10">
            <Fragment>
               <div className="row">
                  <div className="col-12 text-center text-white">
                     <div className="text-lg">
                        {`Total participants scored ${
                           router.query.slug === 'western_region' ? '9' : '10'
                        } => ` +
                           namesList.length +
                           ' participants'}
                     </div>

                     <div className="my-4 inline-block  text-6xl font-bold text-white">
                        {getWinnerName()}
                     </div>

                     {hasWinner ? (
                        <Fragment>
                           <div
                              // type="button"
                              // onClick={() => {
                              //    winnerIndex < namesList.length && setIsRendering(true);
                              //    winnerIndex < namesList.length && next();
                              // }}
                              className={classNames(
                                 'relative mx-auto mt-8 block  min-h-[150px]  w-full rounded-lg bg-white bg-no-repeat shadow-sm '
                              )}>
                              <div className="absolute-center w-full  text-4xl  text-[#29526a] ">
                                 <div>{name?.full_name}</div>
                                 <div className="font-bold">{name?.staff_number}</div>
                                 {<Translate id={`web:${name?.region}`} />}
                              </div>
                           </div>
                           <Fragment>{isExploding ? <Confetti /> : ''}</Fragment>
                           <div className="row">
                              <div className="col-12 relative z-10  mt-10 sm:col-8 md:col-6 lg:col-4 lg:offset-2">
                                 <ButtonBtn
                                    id="draw-btn" //* for test cases
                                    // loading={loading}

                                    callBack={() => winnerIndex < namesList.length && next()}
                                    text={translate({ id: 'web:next' })}
                                    noIcon
                                 />
                              </div>
                              <div className="col-12 relative z-10  mt-10 sm:col-8 md:col-6 lg:col-4">
                                 <ButtonBtn
                                    id="draw-btn" //* for test cases
                                    // loading={loading}

                                    callBack={() => winnerIndex < namesList.length && drawAgain()}
                                    text={translate({ id: 'web:draw_again' })}
                                    noIcon
                                 />
                              </div>
                           </div>
                        </Fragment>
                     ) : (
                        <React.Fragment>
                           {isRendering ? (
                              <div
                                 // type="button"
                                 // onClick={() => {
                                 //    setIsRendering(false);
                                 //    getWinner();
                                 // }}
                                 className={classNames(
                                    'relative mx-auto mt-8 block  min-h-[150px]  w-full rounded-lg bg-white bg-no-repeat shadow-sm '
                                 )}>
                                 <div className="absolute-center w-full text-4xl  text-[#29526a] ">
                                    <div>{name?.full_name}</div>
                                    <div className="font-bold">{name?.staff_number}</div>
                                    {<Translate id={`web:${name?.region}`} />}
                                 </div>
                              </div>
                           ) : (
                              <React.Fragment>
                                 <div
                                    // type="button"
                                    // onClick={() => setIsRendering(true)}
                                    className={classNames(
                                       'relative mx-auto mt-8 block min-h-[150px] w-full rounded-lg bg-white bg-no-repeat shadow-sm '
                                    )}>
                                    <div className="absolute-center w-full pb-5 text-4xl  text-[#29526a] ">
                                       <React.Fragment>
                                          {isRendering ? (
                                             <React.Fragment>
                                                <div>{name?.full_name}</div>
                                                <div className="font-bold">
                                                   {name?.staff_number}
                                                </div>
                                                <div className="font-bold">
                                                   {<Translate id={`web:${name?.region}`} />}
                                                </div>
                                             </React.Fragment>
                                          ) : (
                                             hasWinner
                                          )}
                                       </React.Fragment>
                                    </div>
                                 </div>
                                 <div className="row">
                                    <div className="col-12 relative z-10 mx-auto mt-10 sm:col-8 md:col-6 lg:col-4">
                                       <ButtonBtn
                                          id="show-btn" //* for test cases
                                          // loading={loading}

                                          callBack={() => setIsRendering(true)}
                                          text={translate({ id: 'web:draw' })}
                                          noIcon
                                       />
                                    </div>
                                 </div>
                              </React.Fragment>
                           )}

                           <div className="row">
                              <div className="col-12 relative z-10 mx-auto mt-10 sm:col-8 md:col-6 lg:col-4">
                                 {isRendering && (
                                    <ButtonBtn
                                       id="show-btn" //* for test cases
                                       // loading={loading}

                                       callBack={() => getWinner()}
                                       text={translate({ id: 'web:show_a_winner' })}
                                       noIcon
                                    />
                                 )}
                              </div>
                           </div>
                        </React.Fragment>
                     )}
                  </div>
               </div>
            </Fragment>
         </div>
      </section>
   );
});
DrawSectionsInner.displayName = `DrawSectionsInner`;

export default DrawSectionsInner;
