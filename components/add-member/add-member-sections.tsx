import { useTranslate } from '~/i18n';
import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import CustomInput from '../shared/forms/custom-input';
import SubmitBtn from '../shared/buttons/submit-btn';
import toast from 'react-hot-toast';
import { useRouter } from 'next/router';
import Cookies from 'js-cookie';
import Axios from '~/utils/axios';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';
import { TeamType } from '~/interfaces/team';
import ButtonBtn from '../shared/buttons/button-btn';
// import ButtonBtn from '../shared/buttons/button-btn';
// import { MemberType } from '~/interfaces/members';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type FormData =
   | {
        name: string | null;
        //   staff_number: string;
        //   region: string;
     }
   | { [key: string]: string };

// type AddMemberSectionsProps = {
//    team: TeamType;
// };

const AddMemberSections = () => {
   Cookies.remove('user_data');
   Cookies.remove('questions');

   const router = useRouter();
   const { executeRecaptcha } = useGoogleReCaptcha();

   const { lang, translate } = useTranslate();
   const [loading, setLoading] = useState(false);
   const [loading2, setLoading2] = useState(false);

   const {
      register,
      handleSubmit,
      setValue,
      setError,
      formState: { errors },
   } = useForm<FormData>();

   const [team, setTeam] = useState<TeamType>();

   useEffect(() => {
      async function getUserData() {
         setLoading(true);
         try {
            const response = await Axios.get(`/team-info/${router.query.team_id}?lang=${lang}`);
            // console.log(response);

            setTeam(response.data.data);
         } catch (error: any) {
            // setHasError(true);
         }
         setLoading(false);
      }

      getUserData();
   }, [lang, router]);

   const submitForm = async (values: FormData) => {
      // console.log(values);
      if (loading) {
         return;
      }
      setLoading(true);
      const recaptcha = await executeRecaptcha?.();
      const data = {
         ...values,
         team_id: team?.id,
         recaptcha,
      };
      // console.log(data, 'data');

      try {
         const response = await Axios.post(`add-member?lang=${lang}`, data);
         // console.log(response.data.data);
         setTeam(response.data.data);
         toast.success(translate({ id: 'res:info_saved' }));
         setValue('name', null);
      } catch (error: any) {
         console.log(error, 'error');
         if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 4000,
            });
         } else if (error?.response?.status === 422) {
            const responseErrors = error?.response?.data?.data;
            Object.keys(responseErrors).map(key => {
               setError(key as 'name', {
                  message: responseErrors[key][0],
               });
               // toast.error(responseErrors[key][0], {
               //    duration: 4000,
               // });
            });
            // toast.error(error?.response?.data?.status, {
            //    duration: 4000,
            // });
         } else {
            toast.error(translate({ id: 'res:500' }), {
               duration: 4000,
            });
         }
      }
      setLoading(false);
   };

   const confirm = async () => {
      // console.log(values);
      if (loading2) {
         return;
      }
      setLoading2(true);
      const recaptcha = await executeRecaptcha?.();
      const data = {
         team_id: team?.id,
         recaptcha,
      };

      try {
         await Axios.post(`confirm-team/${team?.id}?lang=${lang}`, data);
         // console.log(response.data.data);
         // setTeam(response.data.data);
         toast.success(translate({ id: 'res:info_saved' }));
         router.replace(`/contests/${router.query.slug}/team/${team?.id}/start`);
      } catch (error: any) {
         console.log(error, 'error');
         if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 4000,
            });
         } else if (error?.response?.status === 422) {
            // const responseErrors = error?.response?.data?.data;
            // Object.keys(responseErrors).map(key => {
            //    setError(key as 'name', {
            //       message: responseErrors[key][0],
            //    });
            //    // toast.error(responseErrors[key][0], {
            //    //    duration: 4000,
            //    // });
            // });
            // toast.error(error?.response?.data?.status, {
            //    duration: 4000,
            // });
            toast.error(translate({ id: 'res:500' }), {
               duration: 4000,
            });
         } else {
            toast.error(translate({ id: 'res:500' }), {
               duration: 4000,
            });
         }
      }
      setLoading2(false);
   };
   return (
      <React.Fragment>
         <React.Fragment>
            <div className="container">
               <div className="row">
                  <div className="lg:col-4 lg:offset-4">
                     <div className="text-center text-xl font-bold text-white">اسم الفريق</div>
                     <div className="mb-5 text-center text-white">{team?.name}</div>
                     <div className="mb-3 text-center text-white">{'يرجى إضافة اعضاء الفريق'}</div>

                     <div className="mb-4 rounded-lg border border-white">
                        <div className="p-1 text-center text-white">
                           {team?.members?.map((item, index) => (
                              <div key={index}>{item.name}</div>
                           ))}
                        </div>
                     </div>
                     <form
                        noValidate
                        onSubmit={handleSubmit(submitForm)}
                        className=""
                        autoComplete="off">
                        <div className="row">
                           <div className="lg:px-11">
                              <div className="row">
                                 <div className="col-12">
                                    {/* name */}
                                    <CustomInput
                                       label={translate({ id: 'web:team_member' })}
                                       type="text"
                                       id="name"
                                       error={errors.name?.message}
                                       isInline={false}
                                       isRequired={true}
                                       {...register('name', {
                                          required: translate({ id: 'validation:required' }),
                                       })}
                                    />
                                 </div>
                              </div>
                              <div className="col-12 mt-2">
                                 <SubmitBtn noIcon id="submit-btn" loading={loading} text={'اضف'} />
                              </div>
                           </div>
                        </div>
                     </form>
                     <div className="mt-5">
                        <hr className="mb-3" />
                        <div className="mb-3 text-center text-white">
                           {'عند استكمال اضافة جميع الاعضاء يرجى الضغط على التآكيد'}
                        </div>
                        <ButtonBtn
                           id=""
                           callBack={() => {
                              confirm();
                           }}
                           noIcon
                           loading={loading2}
                           text={'تأكيد'}
                        />
                     </div>

                     {/* <div className="lg:px-11"> */}
                  </div>
               </div>
            </div>
         </React.Fragment>
      </React.Fragment>
   );
};

export default AddMemberSections;
